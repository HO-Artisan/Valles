plugins {
	id 'java'
	id 'java-library'
	id 'idea'
	id 'fabric-loom' version '1.9-SNAPSHOT'
	id 'maven-publish'
	id 'com.diffplug.spotless' version '6.19.0'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	maven {
		name 'TerraformersMC'
		url 'https://maven.terraformersmc.com/releases/'
	}
	maven {
		name 'Ladysnake Mods'
		url 'https://maven.ladysnake.org/releases'
	}
	maven { url 'https://maven.shedaniel.me/' }
	maven { url 'https://mvn.devos.one/snapshots/' }
}

fabricApi {
	configureDataGeneration {
		client = true
		createSourceSet = true
		modId = "valles-datagen"
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modApi "com.terraformersmc:modmenu:${modmenu_version}" // Mod Menu
	modApi "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}" // REI
	modApi "me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}" // Cloth Config

	// CCA
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-entity:${project.cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-world:${project.cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-chunk:${project.cca_version}"
	modImplementation "org.ladysnake.cardinal-components-api:cardinal-components-block:${project.cca_version}"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

spotless {
	java {
		removeUnusedImports()
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}